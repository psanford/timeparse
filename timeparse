#!/usr/bin/env ruby

require 'time'
require 'getoptlong'

format = nil
help = false
GetoptLong.new(
  ['--unix',  GetoptLong::NO_ARGUMENT],
  ['--unix_ms',  GetoptLong::NO_ARGUMENT],
  ['--utc',  GetoptLong::NO_ARGUMENT],
  ['--local',  GetoptLong::NO_ARGUMENT],
  ['--system',  GetoptLong::NO_ARGUMENT],
  ['--help', GetoptLong::NO_ARGUMENT],
).each do |opt, arg|
  case opt
  when '--unix'
    format = :unix
  when '--unix_ms'
    format = :unix_ms
  when '--utc'
    format = :utc
  when '--local'
    format = :local
  when '--system'
    format = :system
  when '--help'
    help = true
  end
end

input = ARGV[0]

def usage
  STDERR.puts("usage: #{$0} <time|epoch|now> [--unix|unix_ms|utc|local|system]")
  exit 1
end

if input == nil || help == true
  usage()
end

t = nil
u = nil

if input.match(/^[0-9.]+$/)
  i = input.to_f
  while i > 1000000000000
    i /= 1000
  end
  t = Time.at(i)
elsif input == "now"
  t = Time.new
else
  trys = [
    Time.method(:rfc2822),
    Time.method(:httpdate),
    Time.method(:xmlschema),
  ]
  match = false
  trys.each do |fn|
    begin
      t = fn.call(input)
      match = true
    rescue
    end
  end

  if !match
    # Thu Oct 21 18:04:33 2021 +0100 => '2021 Oct 21 18:04:33 +0100'
    if m = input.match(/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) ((?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d+ \d+:\d+:\d+(?:.\d+)?) (\d+)(.*)/)
      input = "#{m[3]} #{m[2]} #{m[4]}"
    end

    t = Time.parse(input)
  end
end

if format == :unix
  puts t.to_i
elsif format == :unix_ms
  puts (t.to_f * 1000).to_i
elsif format == :local
  puts t.to_datetime.rfc3339(3)
elsif format == :system
  puts Time.at(t.to_f).to_datetime.rfc3339(3)
elsif format == :utc
  puts t.dup.utc.to_datetime.rfc3339(3)
else
  puts "epoch seconds : #{t.to_i}"
  puts "epoch ms      : #{(t.to_f * 1000).to_i}"
  puts "system time   : #{Time.at(t.to_f).to_datetime.rfc3339(3)}"
  puts "ts local time : #{t.to_datetime.rfc3339(3)}"
  puts "utc time      : #{t.dup.utc.to_datetime.rfc3339(3)}"
end
